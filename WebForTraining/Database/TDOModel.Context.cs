//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebForTraining.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class tdoEntities : DbContext
    {
        public tdoEntities()
            : base("name=tdoEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditCargoType(Nullable<int> cargoTypeID, string cargoTypeName, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var cargoTypeIDParameter = cargoTypeID.HasValue ?
                new ObjectParameter("cargoTypeID", cargoTypeID) :
                new ObjectParameter("cargoTypeID", typeof(int));
    
            var cargoTypeNameParameter = cargoTypeName != null ?
                new ObjectParameter("cargoTypeName", cargoTypeName) :
                new ObjectParameter("cargoTypeName", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditCargoType", cargoTypeIDParameter, cargoTypeNameParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsCargoType> uspGetCargoType(Nullable<int> cargoTypeID)
        {
            var cargoTypeIDParameter = cargoTypeID.HasValue ?
                new ObjectParameter("cargoTypeID", cargoTypeID) :
                new ObjectParameter("cargoTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsCargoType>("uspGetCargoType", cargoTypeIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditUsers(Nullable<int> userID, Nullable<int> userGroupID, string userName, string password, string salt, Nullable<bool> passwordCanExpire, Nullable<System.DateTime> passwordExpiryDate, Nullable<bool> isLocked, Nullable<int> loginAttempts, Nullable<System.DateTime> lastLoginDate, string theme, Nullable<bool> resetPassword, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("userGroupID", userGroupID) :
                new ObjectParameter("userGroupID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var saltParameter = salt != null ?
                new ObjectParameter("salt", salt) :
                new ObjectParameter("salt", typeof(string));
    
            var passwordCanExpireParameter = passwordCanExpire.HasValue ?
                new ObjectParameter("passwordCanExpire", passwordCanExpire) :
                new ObjectParameter("passwordCanExpire", typeof(bool));
    
            var passwordExpiryDateParameter = passwordExpiryDate.HasValue ?
                new ObjectParameter("passwordExpiryDate", passwordExpiryDate) :
                new ObjectParameter("passwordExpiryDate", typeof(System.DateTime));
    
            var isLockedParameter = isLocked.HasValue ?
                new ObjectParameter("isLocked", isLocked) :
                new ObjectParameter("isLocked", typeof(bool));
    
            var loginAttemptsParameter = loginAttempts.HasValue ?
                new ObjectParameter("loginAttempts", loginAttempts) :
                new ObjectParameter("loginAttempts", typeof(int));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("lastLoginDate", lastLoginDate) :
                new ObjectParameter("lastLoginDate", typeof(System.DateTime));
    
            var themeParameter = theme != null ?
                new ObjectParameter("theme", theme) :
                new ObjectParameter("theme", typeof(string));
    
            var resetPasswordParameter = resetPassword.HasValue ?
                new ObjectParameter("resetPassword", resetPassword) :
                new ObjectParameter("resetPassword", typeof(bool));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditUsers", userIDParameter, userGroupIDParameter, userNameParameter, passwordParameter, saltParameter, passwordCanExpireParameter, passwordExpiryDateParameter, isLockedParameter, loginAttemptsParameter, lastLoginDateParameter, themeParameter, resetPasswordParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditUserSessionHistory(Nullable<System.Guid> sessionID, Nullable<int> userID, Nullable<System.DateTime> logoutDate, Nullable<bool> isActive, string deviceType, string deviceName, string browser)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var logoutDateParameter = logoutDate.HasValue ?
                new ObjectParameter("logoutDate", logoutDate) :
                new ObjectParameter("logoutDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var deviceTypeParameter = deviceType != null ?
                new ObjectParameter("deviceType", deviceType) :
                new ObjectParameter("deviceType", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("deviceName", deviceName) :
                new ObjectParameter("deviceName", typeof(string));
    
            var browserParameter = browser != null ?
                new ObjectParameter("browser", browser) :
                new ObjectParameter("browser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditUserSessionHistory", sessionIDParameter, userIDParameter, logoutDateParameter, isActiveParameter, deviceTypeParameter, deviceNameParameter, browserParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditUserSessions(Nullable<System.Guid> sessionID, Nullable<int> userID, Nullable<bool> isActive, string deviceType, string deviceName, string browser)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            var deviceTypeParameter = deviceType != null ?
                new ObjectParameter("deviceType", deviceType) :
                new ObjectParameter("deviceType", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("deviceName", deviceName) :
                new ObjectParameter("deviceName", typeof(string));
    
            var browserParameter = browser != null ?
                new ObjectParameter("browser", browser) :
                new ObjectParameter("browser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditUserSessions", sessionIDParameter, userIDParameter, isActiveParameter, deviceTypeParameter, deviceNameParameter, browserParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelUserSession(Nullable<System.Guid> sessionID, Nullable<int> userID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelUserSession", sessionIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<ClsUsers> uspGetUsers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsUsers>("uspGetUsers");
        }
    
        public virtual ObjectResult<ClsUserSessionHistory> uspGetUserSessionHistory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsUserSessionHistory>("uspGetUserSessionHistory");
        }
    
        public virtual ObjectResult<ClsUserSessions> uspGetUserSessions()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsUserSessions>("uspGetUserSessions");
        }
    
        public virtual ObjectResult<ClsReturnValues> uspUserAuthentication(string userName, string password, string deviceType, string deviceName, string browser)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var deviceTypeParameter = deviceType != null ?
                new ObjectParameter("deviceType", deviceType) :
                new ObjectParameter("deviceType", typeof(string));
    
            var deviceNameParameter = deviceName != null ?
                new ObjectParameter("deviceName", deviceName) :
                new ObjectParameter("deviceName", typeof(string));
    
            var browserParameter = browser != null ?
                new ObjectParameter("browser", browser) :
                new ObjectParameter("browser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspUserAuthentication", userNameParameter, passwordParameter, deviceTypeParameter, deviceNameParameter, browserParameter);
        }
    
        public virtual ObjectResult<ClsUserGroups> uspGetUserGroups()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsUserGroups>("uspGetUserGroups");
        }
    
        public virtual ObjectResult<ClsUserDisplay> uspGetUserDisplay(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsUserDisplay>("uspGetUserDisplay", userIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditUserGroups(Nullable<int> userGroupID, string groupName, string description, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("userGroupID", userGroupID) :
                new ObjectParameter("userGroupID", typeof(int));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("groupName", groupName) :
                new ObjectParameter("groupName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditUserGroups", userGroupIDParameter, groupNameParameter, descriptionParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelUsergroup(Nullable<int> userGroupID)
        {
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("userGroupID", userGroupID) :
                new ObjectParameter("userGroupID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelUsergroup", userGroupIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelUsers(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelUsers", userIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspChangePassword(Nullable<int> userID, string oldPassword, string newPassword)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("userID", userID) :
                new ObjectParameter("userID", typeof(int));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("oldPassword", oldPassword) :
                new ObjectParameter("oldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("newPassword", newPassword) :
                new ObjectParameter("newPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspChangePassword", userIDParameter, oldPasswordParameter, newPasswordParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditAccessLevels(Nullable<int> accessLevelID, Nullable<int> userGroupID, Nullable<int> formID, Nullable<bool> canAdd, Nullable<bool> canView, Nullable<bool> canEdit, Nullable<bool> canDelete, Nullable<bool> canApprove, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var accessLevelIDParameter = accessLevelID.HasValue ?
                new ObjectParameter("accessLevelID", accessLevelID) :
                new ObjectParameter("accessLevelID", typeof(int));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("userGroupID", userGroupID) :
                new ObjectParameter("userGroupID", typeof(int));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("formID", formID) :
                new ObjectParameter("formID", typeof(int));
    
            var canAddParameter = canAdd.HasValue ?
                new ObjectParameter("canAdd", canAdd) :
                new ObjectParameter("canAdd", typeof(bool));
    
            var canViewParameter = canView.HasValue ?
                new ObjectParameter("canView", canView) :
                new ObjectParameter("canView", typeof(bool));
    
            var canEditParameter = canEdit.HasValue ?
                new ObjectParameter("canEdit", canEdit) :
                new ObjectParameter("canEdit", typeof(bool));
    
            var canDeleteParameter = canDelete.HasValue ?
                new ObjectParameter("canDelete", canDelete) :
                new ObjectParameter("canDelete", typeof(bool));
    
            var canApproveParameter = canApprove.HasValue ?
                new ObjectParameter("canApprove", canApprove) :
                new ObjectParameter("canApprove", typeof(bool));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditAccessLevels", accessLevelIDParameter, userGroupIDParameter, formIDParameter, canAddParameter, canViewParameter, canEditParameter, canDeleteParameter, canApproveParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditCity(Nullable<int> cityID, string cityName, string cityCode, Nullable<int> stateID, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("cityID", cityID) :
                new ObjectParameter("cityID", typeof(int));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("cityName", cityName) :
                new ObjectParameter("cityName", typeof(string));
    
            var cityCodeParameter = cityCode != null ?
                new ObjectParameter("cityCode", cityCode) :
                new ObjectParameter("cityCode", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(int));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditCity", cityIDParameter, cityNameParameter, cityCodeParameter, stateIDParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelAccessLevels(Nullable<int> accesslevelID)
        {
            var accesslevelIDParameter = accesslevelID.HasValue ?
                new ObjectParameter("accesslevelID", accesslevelID) :
                new ObjectParameter("accesslevelID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelAccessLevels", accesslevelIDParameter);
        }
    
        public virtual ObjectResult<ClsAccessLevels> uspGetAccessLevels(Nullable<int> accessLevelID, Nullable<int> userGroupID, Nullable<int> formID)
        {
            var accessLevelIDParameter = accessLevelID.HasValue ?
                new ObjectParameter("accessLevelID", accessLevelID) :
                new ObjectParameter("accessLevelID", typeof(int));
    
            var userGroupIDParameter = userGroupID.HasValue ?
                new ObjectParameter("userGroupID", userGroupID) :
                new ObjectParameter("userGroupID", typeof(int));
    
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("formID", formID) :
                new ObjectParameter("formID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsAccessLevels>("uspGetAccessLevels", accessLevelIDParameter, userGroupIDParameter, formIDParameter);
        }
    
        public virtual ObjectResult<ClsCity> uspGetCity(Nullable<int> cityID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("cityID", cityID) :
                new ObjectParameter("cityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsCity>("uspGetCity", cityIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditTruckType(Nullable<int> truckTypeID, string truckTypeName, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var truckTypeIDParameter = truckTypeID.HasValue ?
                new ObjectParameter("truckTypeID", truckTypeID) :
                new ObjectParameter("truckTypeID", typeof(int));
    
            var truckTypeNameParameter = truckTypeName != null ?
                new ObjectParameter("truckTypeName", truckTypeName) :
                new ObjectParameter("truckTypeName", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditTruckType", truckTypeIDParameter, truckTypeNameParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelTruckType(Nullable<int> truckTypeID)
        {
            var truckTypeIDParameter = truckTypeID.HasValue ?
                new ObjectParameter("truckTypeID", truckTypeID) :
                new ObjectParameter("truckTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelTruckType", truckTypeIDParameter);
        }
    
        public virtual ObjectResult<ClsTruckType> uspGetTruckType()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsTruckType>("uspGetTruckType");
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditForms(Nullable<int> formID, Nullable<int> menuItemID, string formName, string formDescription, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("formID", formID) :
                new ObjectParameter("formID", typeof(int));
    
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("menuItemID", menuItemID) :
                new ObjectParameter("menuItemID", typeof(int));
    
            var formNameParameter = formName != null ?
                new ObjectParameter("formName", formName) :
                new ObjectParameter("formName", typeof(string));
    
            var formDescriptionParameter = formDescription != null ?
                new ObjectParameter("formDescription", formDescription) :
                new ObjectParameter("formDescription", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditForms", formIDParameter, menuItemIDParameter, formNameParameter, formDescriptionParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditMenuItems(Nullable<int> menuItemID, Nullable<int> menuID, string menuItemName, string menuItemDescription, Nullable<int> menuItemRanking, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("menuItemID", menuItemID) :
                new ObjectParameter("menuItemID", typeof(int));
    
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("menuID", menuID) :
                new ObjectParameter("menuID", typeof(int));
    
            var menuItemNameParameter = menuItemName != null ?
                new ObjectParameter("menuItemName", menuItemName) :
                new ObjectParameter("menuItemName", typeof(string));
    
            var menuItemDescriptionParameter = menuItemDescription != null ?
                new ObjectParameter("menuItemDescription", menuItemDescription) :
                new ObjectParameter("menuItemDescription", typeof(string));
    
            var menuItemRankingParameter = menuItemRanking.HasValue ?
                new ObjectParameter("menuItemRanking", menuItemRanking) :
                new ObjectParameter("menuItemRanking", typeof(int));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditMenuItems", menuItemIDParameter, menuIDParameter, menuItemNameParameter, menuItemDescriptionParameter, menuItemRankingParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditMenus(Nullable<int> menuID, string menuName, string menuDesc, Nullable<int> createdByID, Nullable<int> menuRanking, Nullable<System.Guid> sessionID)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("menuID", menuID) :
                new ObjectParameter("menuID", typeof(int));
    
            var menuNameParameter = menuName != null ?
                new ObjectParameter("menuName", menuName) :
                new ObjectParameter("menuName", typeof(string));
    
            var menuDescParameter = menuDesc != null ?
                new ObjectParameter("menuDesc", menuDesc) :
                new ObjectParameter("menuDesc", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var menuRankingParameter = menuRanking.HasValue ?
                new ObjectParameter("menuRanking", menuRanking) :
                new ObjectParameter("menuRanking", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditMenus", menuIDParameter, menuNameParameter, menuDescParameter, createdByIDParameter, menuRankingParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelForms(Nullable<int> formID)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("formID", formID) :
                new ObjectParameter("formID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelForms", formIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelMenuItems(Nullable<int> menuItemID)
        {
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("menuItemID", menuItemID) :
                new ObjectParameter("menuItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelMenuItems", menuItemIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelMenus(Nullable<int> menuID)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("menuID", menuID) :
                new ObjectParameter("menuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelMenus", menuIDParameter);
        }
    
        public virtual ObjectResult<ClsForms> uspGetForms(Nullable<int> formID)
        {
            var formIDParameter = formID.HasValue ?
                new ObjectParameter("formID", formID) :
                new ObjectParameter("formID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsForms>("uspGetForms", formIDParameter);
        }
    
        public virtual ObjectResult<ClsMenuItems> uspGetMenuItems(Nullable<int> menuItemID)
        {
            var menuItemIDParameter = menuItemID.HasValue ?
                new ObjectParameter("menuItemID", menuItemID) :
                new ObjectParameter("menuItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsMenuItems>("uspGetMenuItems", menuItemIDParameter);
        }
    
        public virtual ObjectResult<ClsMenus> uspGetMenus(Nullable<int> menuID)
        {
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("menuID", menuID) :
                new ObjectParameter("menuID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsMenus>("uspGetMenus", menuIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditMenuIcons(Nullable<int> menuIconID, Nullable<int> menuID, string menuIconName)
        {
            var menuIconIDParameter = menuIconID.HasValue ?
                new ObjectParameter("menuIconID", menuIconID) :
                new ObjectParameter("menuIconID", typeof(int));
    
            var menuIDParameter = menuID.HasValue ?
                new ObjectParameter("menuID", menuID) :
                new ObjectParameter("menuID", typeof(int));
    
            var menuIconNameParameter = menuIconName != null ?
                new ObjectParameter("menuIconName", menuIconName) :
                new ObjectParameter("menuIconName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditMenuIcons", menuIconIDParameter, menuIDParameter, menuIconNameParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelMenuIcons(Nullable<int> menuIconID)
        {
            var menuIconIDParameter = menuIconID.HasValue ?
                new ObjectParameter("menuIconID", menuIconID) :
                new ObjectParameter("menuIconID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelMenuIcons", menuIconIDParameter);
        }
    
        public virtual ObjectResult<ClsMenuIcons> uspGetMenuIcons(Nullable<int> menuIconID)
        {
            var menuIconIDParameter = menuIconID.HasValue ?
                new ObjectParameter("menuIconID", menuIconID) :
                new ObjectParameter("menuIconID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsMenuIcons>("uspGetMenuIcons", menuIconIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelCargoType(Nullable<int> cargoTypeID)
        {
            var cargoTypeIDParameter = cargoTypeID.HasValue ?
                new ObjectParameter("cargoTypeID", cargoTypeID) :
                new ObjectParameter("cargoTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelCargoType", cargoTypeIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditDriver(Nullable<int> driverID, string driverCode, string firstName, string middleName, string lastName, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(int));
    
            var driverCodeParameter = driverCode != null ?
                new ObjectParameter("driverCode", driverCode) :
                new ObjectParameter("driverCode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var middleNameParameter = middleName != null ?
                new ObjectParameter("middleName", middleName) :
                new ObjectParameter("middleName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditDriver", driverIDParameter, driverCodeParameter, firstNameParameter, middleNameParameter, lastNameParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsDriver> uspGetDriver()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsDriver>("uspGetDriver");
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelDriver(Nullable<int> driverID)
        {
            var driverIDParameter = driverID.HasValue ?
                new ObjectParameter("driverID", driverID) :
                new ObjectParameter("driverID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelDriver", driverIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditRegion(Nullable<int> regionID, string regionName, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("regionID", regionID) :
                new ObjectParameter("regionID", typeof(int));
    
            var regionNameParameter = regionName != null ?
                new ObjectParameter("regionName", regionName) :
                new ObjectParameter("regionName", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditRegion", regionIDParameter, regionNameParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditState(Nullable<int> stateID, string stateName, string stateCode, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(int));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("stateName", stateName) :
                new ObjectParameter("stateName", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("stateCode", stateCode) :
                new ObjectParameter("stateCode", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditState", stateIDParameter, stateNameParameter, stateCodeParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelRegion(Nullable<int> regionID)
        {
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("regionID", regionID) :
                new ObjectParameter("regionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelRegion", regionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelState(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("stateID", stateID) :
                new ObjectParameter("stateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelState", stateIDParameter);
        }
    
        public virtual ObjectResult<ClsRegion> uspGetRegion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsRegion>("uspGetRegion");
        }
    
        public virtual ObjectResult<ClsState> uspGetState()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsState>("uspGetState");
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelCity(Nullable<int> cityID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("cityID", cityID) :
                new ObjectParameter("cityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelCity", cityIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditRegister(Nullable<int> tdoRegisterID, string jobNumber, Nullable<System.DateTime> dateReceived, Nullable<System.DateTime> expiryDate, string status, Nullable<int> cargoTypeID, string fileRef, Nullable<int> destinationID, Nullable<int> terminalID, string containerNo, Nullable<int> returnTerminal, Nullable<int> truckID, Nullable<System.DateTime> tdoReceiptDate, Nullable<System.DateTime> schDelDate, Nullable<System.DateTime> loadingTime, Nullable<System.DateTime> dispatchTime, string remarks, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var tdoRegisterIDParameter = tdoRegisterID.HasValue ?
                new ObjectParameter("tdoRegisterID", tdoRegisterID) :
                new ObjectParameter("tdoRegisterID", typeof(int));
    
            var jobNumberParameter = jobNumber != null ?
                new ObjectParameter("jobNumber", jobNumber) :
                new ObjectParameter("jobNumber", typeof(string));
    
            var dateReceivedParameter = dateReceived.HasValue ?
                new ObjectParameter("dateReceived", dateReceived) :
                new ObjectParameter("dateReceived", typeof(System.DateTime));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("expiryDate", expiryDate) :
                new ObjectParameter("expiryDate", typeof(System.DateTime));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            var cargoTypeIDParameter = cargoTypeID.HasValue ?
                new ObjectParameter("cargoTypeID", cargoTypeID) :
                new ObjectParameter("cargoTypeID", typeof(int));
    
            var fileRefParameter = fileRef != null ?
                new ObjectParameter("fileRef", fileRef) :
                new ObjectParameter("fileRef", typeof(string));
    
            var destinationIDParameter = destinationID.HasValue ?
                new ObjectParameter("destinationID", destinationID) :
                new ObjectParameter("destinationID", typeof(int));
    
            var terminalIDParameter = terminalID.HasValue ?
                new ObjectParameter("terminalID", terminalID) :
                new ObjectParameter("terminalID", typeof(int));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("containerNo", containerNo) :
                new ObjectParameter("containerNo", typeof(string));
    
            var returnTerminalParameter = returnTerminal.HasValue ?
                new ObjectParameter("returnTerminal", returnTerminal) :
                new ObjectParameter("returnTerminal", typeof(int));
    
            var truckIDParameter = truckID.HasValue ?
                new ObjectParameter("truckID", truckID) :
                new ObjectParameter("truckID", typeof(int));
    
            var tdoReceiptDateParameter = tdoReceiptDate.HasValue ?
                new ObjectParameter("tdoReceiptDate", tdoReceiptDate) :
                new ObjectParameter("tdoReceiptDate", typeof(System.DateTime));
    
            var schDelDateParameter = schDelDate.HasValue ?
                new ObjectParameter("schDelDate", schDelDate) :
                new ObjectParameter("schDelDate", typeof(System.DateTime));
    
            var loadingTimeParameter = loadingTime.HasValue ?
                new ObjectParameter("loadingTime", loadingTime) :
                new ObjectParameter("loadingTime", typeof(System.DateTime));
    
            var dispatchTimeParameter = dispatchTime.HasValue ?
                new ObjectParameter("dispatchTime", dispatchTime) :
                new ObjectParameter("dispatchTime", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("remarks", remarks) :
                new ObjectParameter("remarks", typeof(string));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditRegister", tdoRegisterIDParameter, jobNumberParameter, dateReceivedParameter, expiryDateParameter, statusParameter, cargoTypeIDParameter, fileRefParameter, destinationIDParameter, terminalIDParameter, containerNoParameter, returnTerminalParameter, truckIDParameter, tdoReceiptDateParameter, schDelDateParameter, loadingTimeParameter, dispatchTimeParameter, remarksParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelRegister(Nullable<int> tdoRegisterID)
        {
            var tdoRegisterIDParameter = tdoRegisterID.HasValue ?
                new ObjectParameter("tdoRegisterID", tdoRegisterID) :
                new ObjectParameter("tdoRegisterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelRegister", tdoRegisterIDParameter);
        }
    
        public virtual ObjectResult<ClsRegister> uspGetRegister(Nullable<int> tdoRegisterID)
        {
            var tdoRegisterIDParameter = tdoRegisterID.HasValue ?
                new ObjectParameter("tdoRegisterID", tdoRegisterID) :
                new ObjectParameter("tdoRegisterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsRegister>("uspGetRegister", tdoRegisterIDParameter);
        }
    
        public virtual ObjectResult<ClsJobNumber> uspGetJobNumber()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsJobNumber>("uspGetJobNumber");
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditLocation(Nullable<int> locationID, string locationName, Nullable<int> regionID, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(int));
    
            var locationNameParameter = locationName != null ?
                new ObjectParameter("locationName", locationName) :
                new ObjectParameter("locationName", typeof(string));
    
            var regionIDParameter = regionID.HasValue ?
                new ObjectParameter("regionID", regionID) :
                new ObjectParameter("regionID", typeof(int));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditLocation", locationIDParameter, locationNameParameter, regionIDParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditPort(Nullable<int> portID, string portName, Nullable<int> locationID, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var portIDParameter = portID.HasValue ?
                new ObjectParameter("portID", portID) :
                new ObjectParameter("portID", typeof(int));
    
            var portNameParameter = portName != null ?
                new ObjectParameter("portName", portName) :
                new ObjectParameter("portName", typeof(string));
    
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(int));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditPort", portIDParameter, portNameParameter, locationIDParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditTerminal(Nullable<int> terminalID, string terminalName, Nullable<int> portID, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var terminalIDParameter = terminalID.HasValue ?
                new ObjectParameter("terminalID", terminalID) :
                new ObjectParameter("terminalID", typeof(int));
    
            var terminalNameParameter = terminalName != null ?
                new ObjectParameter("terminalName", terminalName) :
                new ObjectParameter("terminalName", typeof(string));
    
            var portIDParameter = portID.HasValue ?
                new ObjectParameter("portID", portID) :
                new ObjectParameter("portID", typeof(int));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditTerminal", terminalIDParameter, terminalNameParameter, portIDParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspAddEditTruck(Nullable<int> truckID, string truckName, string regNumb, Nullable<int> truckTypeID, Nullable<int> createdByID, Nullable<System.Guid> sessionID)
        {
            var truckIDParameter = truckID.HasValue ?
                new ObjectParameter("truckID", truckID) :
                new ObjectParameter("truckID", typeof(int));
    
            var truckNameParameter = truckName != null ?
                new ObjectParameter("truckName", truckName) :
                new ObjectParameter("truckName", typeof(string));
    
            var regNumbParameter = regNumb != null ?
                new ObjectParameter("regNumb", regNumb) :
                new ObjectParameter("regNumb", typeof(string));
    
            var truckTypeIDParameter = truckTypeID.HasValue ?
                new ObjectParameter("truckTypeID", truckTypeID) :
                new ObjectParameter("truckTypeID", typeof(int));
    
            var createdByIDParameter = createdByID.HasValue ?
                new ObjectParameter("createdByID", createdByID) :
                new ObjectParameter("createdByID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("sessionID", sessionID) :
                new ObjectParameter("sessionID", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspAddEditTruck", truckIDParameter, truckNameParameter, regNumbParameter, truckTypeIDParameter, createdByIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelLocation(Nullable<int> locationID)
        {
            var locationIDParameter = locationID.HasValue ?
                new ObjectParameter("locationID", locationID) :
                new ObjectParameter("locationID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelLocation", locationIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelPort(Nullable<int> portID)
        {
            var portIDParameter = portID.HasValue ?
                new ObjectParameter("portID", portID) :
                new ObjectParameter("portID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelPort", portIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelTerminal(Nullable<int> terminalID)
        {
            var terminalIDParameter = terminalID.HasValue ?
                new ObjectParameter("terminalID", terminalID) :
                new ObjectParameter("terminalID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelTerminal", terminalIDParameter);
        }
    
        public virtual ObjectResult<ClsReturnValues> uspDelTruck(Nullable<int> truckID)
        {
            var truckIDParameter = truckID.HasValue ?
                new ObjectParameter("truckID", truckID) :
                new ObjectParameter("truckID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsReturnValues>("uspDelTruck", truckIDParameter);
        }
    
        public virtual ObjectResult<ClsLocation> uspGetLocation()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsLocation>("uspGetLocation");
        }
    
        public virtual ObjectResult<ClsPort> uspGetPort()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsPort>("uspGetPort");
        }
    
        public virtual ObjectResult<ClsTerminal> uspGetTerminal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsTerminal>("uspGetTerminal");
        }
    
        public virtual ObjectResult<ClsTruck> uspGetTruck()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClsTruck>("uspGetTruck");
        }
    }
}
